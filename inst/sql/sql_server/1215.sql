CREATE TABLE #Codesets (
  codeset_id int NOT NULL,
  concept_id bigint NOT NULL
)
;

INSERT INTO #Codesets (codeset_id, concept_id)
SELECT 0 as codeset_id, c.concept_id FROM (select distinct I.concept_id FROM
( 
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (4002359,35226073,35225626,35225628,35225608,35225637,35226278,35226285,35226229,35225721,35225542,35226288,441523,441818,35226226,35225556,35225568,35226258,35226080,35226292,35226290,433997,35226224,35225673,35226227,438112,35226153,35225630,35226277,35225656,35226081,35226223,35226230,35226041,35225719,35226099,35225631,35225557,35226074,192735,438368,132853,321526,317510,45770892,138379,136056,36715801)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (4002359,35226073,35225626,35225628,35225608,35225637,35226278,35226285,35226229,35225721,35225542,35226288,441523,441818,35226226,35225556,35225568,35226258,35226080,35226292,35226290,433997,35226224,35225673,35226227,438112,35226153,35225630,35226277,35225656,35226081,35226223,35226230,35226041,35225719,35226099,35225631,35225557,35226074,192735,438368,132853,321526,317510,45770892,138379,136056,36715801)
  and c.invalid_reason is null

) I
LEFT JOIN
(
  select concept_id from @vocabulary_database_schema.CONCEPT where concept_id in (40483107,141932,138825,134460,24660,4198828,40568467,4066849,4163261,4129902,200962,4030593,4137430,4121123,4121115,3179081,4121264,4301874,4302298,4032353,4032352,4212885,46271435,4099224,40480576,4222402,4320651,4190190,315523,37016333,439412,4257050,4159967,4267646,4144956,4030445,4030443,4030442,4218974,133169,4227088,4145241,4098131,141663,36713297,36680584,4005251,4002355,4175485,137829,4031127,37109889,140065,3184470,4119473,4117422,437169,4120625,42600086,3181595,37016189,4030065,4035172,40490513,4121273,4100245,4055697,4305588,193308,192298,4187914,4130174,4221698,196943,200527,45768671,4004779,36717456,44808984,4033521,4099036,4209571,45769384,4030501,37397178,36713269,4071698,4165998,4215249,4063919,4211426,316084,4006786,37312009,37312008,37312007,42600054,4261334,4130205,4130201,312823,4130365,4130359,4286058,321212,4220553,4130683,4130696,4130835,4130833,4098158,4184174,4155627,4131138,4209041,42596555,42596554,42596557,42596556,441060,4168700,4131921,4312114,4119768,4062590,4120258,4120259,4112187,4185890,4267788,4087638,4112332,4112331,4130820,4133470,4133590,4133587,4133584,4133583,4133576,42599868,4130218,4130693,4130692,4131284,4131281,4131278,4131276,4131275,4301949,433738,4225549,4247081,438122,4170061,36713549,4098736,4083843,4031983,4113643,4263087,42600052,432347,4048191,4312636,4110496,4168030,438788,439042,4048179,4289744,4240089,4170139,4214454,4046076,44503407,45772061,45757539,44811174,46271149,42709929,44811075,44811072,42709827,46271919,46271920,44792588,44783829,45768843,44504639,44502152,44505300,44501504,44504670,44505190,44504989,44505301,44505353,44505347,44504671,44501123,44505191,44505778,44505537,44500207,44502477,44499835,44505803,44505592,44502422,40481474,36684466,36684808,37018338,37018339,37016101,36717229,36716938,40491854,36715805,37204521,36715813,36716858,36716857,36715814,37206735,36550462,36563360,36551025,36559846,36557558,36550165,36558595,36566329,36541374,36558587,36564896,36554450,36549814,36552184,36550050,37312396,36684806,36684805,37110097,36716622,37208300,37208301,37208302,37208299,37208304,37208305,37208307,37208303,37109300,40486580,36684436,36717482,37117095,37208024,37109301,37208027,37310605,37310606,37309708,37209414,36684823,37310570,37310478,37310607,37208043,37310611,37310608,37310477,36684824,37310609,37208042,37208041,40488416,37204169,37208028,37208044,37310603,37310604,37309709,37209413,36684822,37310569,37310476,37310610,37208040,37310612,37310595,37310475,36684810,37310596,36685059,37208308,37309615,37310473,37309605,37310474,36685060,37208309,37309607,37310471,37309606,37310472,40493479,40491463,40486061,40492930,40491465,40491466,40489401,40492541,37018635,40651279,37310753,37310754,37310751,36713364,37310752,37110363,37110353,37110351,37110355,37119140,37110361,37110362,37110357,37110360,37110352,37110350,37110354,37110364,37110358,37110359,37110356,37208311,37208312,36714924,36712736,36712737,37208246,36715804,40488415,40486025,40486581,37205048,37209429,37309703,37309762,37309758,37309712,37309759,42511843,36565888,36546593,36559298,36557345,36562915,36546302,36558951,36567742,36567176,36566010,36563506,36550658,36545881,36568333,42512808,42513415,42514255,42514244,42513603,42513533,42513800,42513768,42514183,42514320,42514342,42514161,42514180,42514146,42513002,42513658,42513006,42513656,42514295,42514358,42514274,42514169,42514213,42514212,42513702,42514064,42513851,42513624,42513654,42514175,42514200,42513763,42514215,42514205,42514107,42514185,42513450,42513643,42514140,42513398,42514343,42513495,42513594,42513647,42513852,42513674,42512995,42512996,42513022,42514130,36568288,36542305,36565085,42512662,42512227,36549387,36545036,36542689,36555197,36549492,36542718,36558394,36552084,36558974,36555224,36558268,36564103,36555416,36546796,36563863,36564422,36554772,36549058,36545463,36564887,36545775,36555466,36540900,36543284,36558882,36543342,36554422,36548862,36547007,36556609,42512007,36544857,36561174,36552928,36558337,36544342,36560738,36560392,36555995,36544990,36542483,36547480,36566252,36560751,36544915,36553613,36542158,36565933,36554529,36565828,36561262,36555363,36555437,36542484,36549357,36562765,36556908,36557517,36554766,36555427,36557890,36403116,760943,765273,760937,760939,765055,760944,760941,760940,760938,760945,760942,4173658,374882,36523288,4342871,3654613,4110709,4112078,4114354,4291593,36520987,36524084,36539479,36531885,36533885,36538207,36517633,4138332,4113639,4112866,4153884,4112852,4111801,4111918,4221643,4110856,4116079,4239454,4093949,4099347,4114336,4239724,4240908,4241532,442110,4239725,4240655,4239727,4240656,192273,4242190,4241533,4242191,4240909,4240910,4097712,4239728,4242192,4240913,28716,4241535,4239729,4241537,4240914,4134290,4097118,4093784,4097715,442111,4252861,4239731,4242193,4242194,4241538,4097866,4240915,4093782,4239733,201824,4239865,4239734,4242195,4240916,4242196,4241539,4241011,4239862,4242197,4242198,4242199,4241540,4221969,4242200,4239863,4241013,4242201,4241014,4239864,4242203,4242204,4241015,4241541,4290843,4241542,4241016,4241543,4093790,4239866,4240912,193439,74606,4112101,4242205,4241018,4239867,4093789,4242977,379769,4241544,4093950,4241020,4241635,442109,261255,4242206,4239868,4242207,4241021,4241022,4241636,4097729,4149471,4094694,4242208,4093786,24884,4239869,4241637,4239870,442108,4239871,4241023,4241638,376063,4241639,4241640,4094692,4241641,4239872,4242209,436948,4239873,4241025,4242333,4241642,4242334,77234,4252870,4242335,4239874,373982,4097719,373160,4093785,4093791,436936,4241026,4097117,4241027,4239876,4094566,4241643,442104,4241644,4241645,436062,374886,4242336,4239877,4241646,4239878,136937,4241030,4241031,73723,4241032,4239879,24602,198992,4241034,4242337,4241647,4239880,4097709,4241648,381252,4242338,4114356,4241035,4239882,198108,4241651,4239883,201817,4241039,4241652,4242340,4241653,132573,4241040,4239884,4110418,4241041,4239885,4243296,4239886,4001669,4243297,4243411,4242342,4239887,4242343,4239889,4241042,4242344,4243412,4239890,4093793,4239891,4097258,4243413,4241043,4239892,317814,4093781,4241044,4241045,4094693,4239893,4242345,4242346,433978,4113123,442098,4243415,4241047,4118991,4239894,4243416,4243417,4242347,4239895,442103,4239896,4239897,4327105,4240010,4240011,4240012,4242348,4240013,4243418,4241139,442100,4241140,4240015,195498,3173495,4242349,4241141,4094568,134604,442099,4241142,4243419,4243420,4243421,23731,4241019,4097730,4112578,4242350,4242351,4240017,4243422,4241143,4243424,4243425,135208,4156941,4243427,195209,35616882,35619341,4241144,440973,4097122,4241145,4240018,4241146,4094567,4097723,4241147,4097123,4241148,4097724,4242352,4097260,4242353,315505,4240019,4243428,4240020,4242356,4243432,4243433,4298845,4242357,30679,4242803,200670,373166,4097256,4242358,4242359,4242805,4242360,4093797,4242806,438105,4327112,4003171,4094563,4097115,4033324,4001665,4031134,4031253,4093794,4243434,4094695,372861,4097119,4240021,4240022,137813,4242361,4240028,4243435,4240023,4242362,4240024,4243436,4242808,4242363,4240025,4242364,4242365,4242366,4243437,4243438,4240027,4243439,4243440,4297822,4242367,442097,4112098,4243441,4112590,4110437,4097713,4337183,4093798,4242368,4300206,373432,4243442,4242809,4240030,4154632,4240031,4242810,4242490,4240032,4242811,4242812,4094564,4242813,4116216,4303106,433987,4093657,435205,4097865,199764,4243443,4243444,4243445,440063,4243563,4240034,444463,4240035,4243564,4243565,4242492,134304,4240036,4242493,4240037,4242494,4240038,4242495,4242814,4243566,4240039,4242496,4242497,75206,4240040,4242498,201823,4243568,4242499,4242815,4094562,4260193,4002344,4003178,4003177,4003827,4003826,4002350,4002349,4003174,4003176,4002351,4001322,4002346,4243569,198991,4240041,4243570,4093658,30356,28115,4097726,4242816,437251,4242817,77819,4047217,4240042,4242818,4240043,4243573,4097110,4242819,4242501,4240148,4242502,4242341,4242503,4240149,4242820,4243574,4240150,4240151,4243575,4240152,4242821,4242822,444457,434303,200671,4114353,433979,4240153,372272,4243576,4242505,4242974,4243577,4242823,434301,4240155,4242824,4242825,4242826,4242827,4243579,4001662,4242828,4097259,4240156,77517,4242507,74322,4242508,4240157,433981,438116,4242509,444459,3181557,138102,4242510,4240158,4243580,4096359,4240159,4242511,4242512,4242830,4242513,4242831,4242832,4242514,4242515,4096360,4242956,4242957,140966,4240160,4242516,4243582,4242517,4240161,4243583,4182185,198993,4243584,141248,4096365,444445,4240163,4243585,4242958,4240164,4242518,4093945,4242519,4096362,4243586,4240165,4242959,136057,4242960,4096364,4243587,4242961,434885,4242962,4243588,442105,201256,4240166,4243589,444456,444455,444454,4243590,35616611,35616486,444453,444452,194607,4240168,35616596,35616604,444451,444450,200060,444449,4243593,4242522,4242521,4097114,138117,4325198,4180119,135767,4113124,4240174,4243594,196061,4242965,4242524,4242966,4242967,4240175,4242968,4093788,4242653,4240176,4242654,4242969,4242970,4242656,4241654,4243595,4241655,4242971,436366,4242972,4243596,4242657,4242975,4097254,4241028,4113104,438107,4242658,4097722,141249,4243597,4242976,440668,4241657,439763,4241658,444444,4243598,4097262,4242978,4241659,4097261,4242979,4242980,4242660,4243599,4242981,4243720,4242661,4093787,4241660,4242982,4242662,4242983,198103,4242663,196377,4241661,78706,4242664,196364,195500,4243723,4243724,201244,4241662,4243725,4243726,4243727,4242665,4242984,4243728,77815,4242985,4243730,4242986,4242987,438390,4097257,4243731,4097274,4097857,4094714,435506,438990,761004,765198,761003,760997,765037,761005,761002,760998,4208806,4311572,4085712,4144015,4114352,4114186,4112099,4212795,4098959,4114355,4213516,3170462,4112861,4112756,4111934,4002901,4112599,4112972,4110560,4115129,72576,4116093,4099344,4093944,4116356,193431,4113121,193722,4156048,4175198,4333986,4115127,4093654,4097710,4114223,4113130,4112103,4110557,4115141,4111795,4098900,4097107,434605,4111796,4115146,4116353,4112583,4114351,4115136,4112741,4112851,4116352,4112594,432860,4116214,4112602,4081055,4110563,4114083,4151256,4113120,4099352,4096372,4079830,4110716,4116355,4151176,4113129,4116217,4111794,4111651,4170465,4115140,4112588,4116232,4111779,4097106,4111781,36403105,36403125,36403088,36539186,36531242,36534554,36519234,36527653,36537528,36530551,36527589,36534551,36537662,36533469,35622955,36522639,36537853,36532749,36526549,36523636,439083,4297799,751726,36533096,4186928,36520274,36540170,36539412,36533366,36523344,36522872,36517753,36540434,36531006,36527710,36520989,36533672,36522958,36532440,36539612,36529143,36523443,36523457,751707,36539425,36528019,36522028,36522933,36521827,36519362,36532754,36521463,36528735,761036,36523193,36519636,36537843,36521676,36528114,36526504,36525737,36527843,36525283,36524640,36535721,36521207,36530445,36530556,36523941,36519858,36539519,36524849,36403177)
UNION  select c.concept_id
  from @vocabulary_database_schema.CONCEPT c
  join @vocabulary_database_schema.CONCEPT_ANCESTOR ca on c.concept_id = ca.descendant_concept_id
  and ca.ancestor_concept_id in (40483107,141932,138825,134460,24660,4198828,40568467,4066849,4163261,4129902,200962,4030593,4137430,4121123,4121115,3179081,4121264,4301874,4302298,4032353,4032352,4212885,46271435,4099224,40480576,4222402,4320651,4190190,315523,37016333,439412,4257050,4159967,4267646,4144956,4030445,4030443,4030442,4218974,133169,4227088,4145241,4098131,141663,36713297,36680584,4005251,4002355,4175485,137829,4031127,37109889,140065,3184470,4119473,4117422,437169,4120625,42600086,3181595,37016189,4030065,4035172,40490513,4121273,4100245,4055697,4305588,193308,192298,4187914,4130174,4221698,196943,200527,45768671,4004779,36717456,44808984,4033521,4099036,4209571,45769384,4030501,37397178,36713269,4071698,4165998,4215249,4063919,4211426,316084,4006786,37312009,37312008,37312007,42600054,4261334,4130205,4130201,312823,4130365,4130359,4286058,321212,4220553,4130683,4130696,4130835,4130833,4098158,4184174,4155627,4131138,4209041,42596555,42596554,42596557,42596556,441060,4168700,4131921,4312114,4119768,4062590,4120258,4120259,4112187,4185890,4267788,4087638,4112332,4112331,4130820,4133470,4133590,4133587,4133584,4133583,4133576,42599868,4130218,4130693,4130692,4131284,4131281,4131278,4131276,4131275,4301949,433738,4225549,4247081,438122,4170061,36713549,4098736,4083843,4031983,4113643,4263087,42600052,432347,4048191,4312636,4110496,4168030,438788,439042,4048179,4289744,4240089,4170139,4214454,4046076,44503407,45772061,45757539,44811174,46271149,42709929,44811075,44811072,42709827,46271919,46271920,44792588,44783829,45768843,44504639,44502152,44505300,44501504,44504670,44505190,44504989,44505301,44505353,44505347,44504671,44501123,44505191,44505778,44505537,44500207,44502477,44499835,44505803,44505592,44502422,40481474,36684466,36684808,37018338,37018339,37016101,36717229,36716938,40491854,36715805,37204521,36715813,36716858,36716857,36715814,37206735,36550462,36563360,36551025,36559846,36557558,36550165,36558595,36566329,36541374,36558587,36564896,36554450,36549814,36552184,36550050,37312396,36684806,36684805,37110097,36716622,37208300,37208301,37208302,37208299,37208304,37208305,37208307,37208303,37109300,40486580,36684436,36717482,37117095,37208024,37109301,37208027,37310605,37310606,37309708,37209414,36684823,37310570,37310478,37310607,37208043,37310611,37310608,37310477,36684824,37310609,37208042,37208041,40488416,37204169,37208028,37208044,37310603,37310604,37309709,37209413,36684822,37310569,37310476,37310610,37208040,37310612,37310595,37310475,36684810,37310596,36685059,37208308,37309615,37310473,37309605,37310474,36685060,37208309,37309607,37310471,37309606,37310472,40493479,40491463,40486061,40492930,40491465,40491466,40489401,40492541,37018635,40651279,37310753,37310754,37310751,36713364,37310752,37110363,37110353,37110351,37110355,37119140,37110361,37110362,37110357,37110360,37110352,37110350,37110354,37110364,37110358,37110359,37110356,37208311,37208312,36714924,36712736,36712737,37208246,36715804,40488415,40486025,40486581,37205048,37209429,37309703,37309762,37309758,37309712,37309759,42511843,36565888,36546593,36559298,36557345,36562915,36546302,36558951,36567742,36567176,36566010,36563506,36550658,36545881,36568333,42512808,42513415,42514255,42514244,42513603,42513533,42513800,42513768,42514183,42514320,42514342,42514161,42514180,42514146,42513002,42513658,42513006,42513656,42514295,42514358,42514274,42514169,42514213,42514212,42513702,42514064,42513851,42513624,42513654,42514175,42514200,42513763,42514215,42514205,42514107,42514185,42513450,42513643,42514140,42513398,42514343,42513495,42513594,42513647,42513852,42513674,42512995,42512996,42513022,42514130,36568288,36542305,36565085,42512662,42512227,36549387,36545036,36542689,36555197,36549492,36542718,36558394,36552084,36558974,36555224,36558268,36564103,36555416,36546796,36563863,36564422,36554772,36549058,36545463,36564887,36545775,36555466,36540900,36543284,36558882,36543342,36554422,36548862,36547007,36556609,42512007,36544857,36561174,36552928,36558337,36544342,36560738,36560392,36555995,36544990,36542483,36547480,36566252,36560751,36544915,36553613,36542158,36565933,36554529,36565828,36561262,36555363,36555437,36542484,36549357,36562765,36556908,36557517,36554766,36555427,36557890,36403116,760943,765273,760937,760939,765055,760944,760941,760940,760938,760945,760942,4173658,374882,36523288,4342871,3654613,4110709,4112078,4114354,4291593,36520987,36524084,36539479,36531885,36533885,36538207,36517633,4138332,4113639,4112866,4153884,4112852,4111801,4111918,4221643,4110856,4116079,4239454,4093949,4099347,4114336,4239724,4240908,4241532,442110,4239725,4240655,4239727,4240656,192273,4242190,4241533,4242191,4240909,4240910,4097712,4239728,4242192,4240913,28716,4241535,4239729,4241537,4240914,4134290,4097118,4093784,4097715,442111,4252861,4239731,4242193,4242194,4241538,4097866,4240915,4093782,4239733,201824,4239865,4239734,4242195,4240916,4242196,4241539,4241011,4239862,4242197,4242198,4242199,4241540,4221969,4242200,4239863,4241013,4242201,4241014,4239864,4242203,4242204,4241015,4241541,4290843,4241542,4241016,4241543,4093790,4239866,4240912,193439,74606,4112101,4242205,4241018,4239867,4093789,4242977,379769,4241544,4093950,4241020,4241635,442109,261255,4242206,4239868,4242207,4241021,4241022,4241636,4097729,4149471,4094694,4242208,4093786,24884,4239869,4241637,4239870,442108,4239871,4241023,4241638,376063,4241639,4241640,4094692,4241641,4239872,4242209,436948,4239873,4241025,4242333,4241642,4242334,77234,4252870,4242335,4239874,373982,4097719,373160,4093785,4093791,436936,4241026,4097117,4241027,4239876,4094566,4241643,442104,4241644,4241645,436062,374886,4242336,4239877,4241646,4239878,136937,4241030,4241031,73723,4241032,4239879,24602,198992,4241034,4242337,4241647,4239880,4097709,4241648,381252,4242338,4114356,4241035,4239882,198108,4241651,4239883,201817,4241039,4241652,4242340,4241653,132573,4241040,4239884,4110418,4241041,4239885,4243296,4239886,4001669,4243297,4243411,4242342,4239887,4242343,4239889,4241042,4242344,4243412,4239890,4093793,4239891,4097258,4243413,4241043,4239892,317814,4093781,4241044,4241045,4094693,4239893,4242345,4242346,433978,4113123,442098,4243415,4241047,4118991,4239894,4243416,4243417,4242347,4239895,442103,4239896,4239897,4327105,4240010,4240011,4240012,4242348,4240013,4243418,4241139,442100,4241140,4240015,195498,3173495,4242349,4241141,4094568,134604,442099,4241142,4243419,4243420,4243421,23731,4241019,4097730,4112578,4242350,4242351,4240017,4243422,4241143,4243424,4243425,135208,4156941,4243427,195209,35616882,35619341,4241144,440973,4097122,4241145,4240018,4241146,4094567,4097723,4241147,4097123,4241148,4097724,4242352,4097260,4242353,315505,4240019,4243428,4240020,4242356,4243432,4243433,4298845,4242357,30679,4242803,200670,373166,4097256,4242358,4242359,4242805,4242360,4093797,4242806,438105,4327112,4003171,4094563,4097115,4033324,4001665,4031134,4031253,4093794,4243434,4094695,372861,4097119,4240021,4240022,137813,4242361,4240028,4243435,4240023,4242362,4240024,4243436,4242808,4242363,4240025,4242364,4242365,4242366,4243437,4243438,4240027,4243439,4243440,4297822,4242367,442097,4112098,4243441,4112590,4110437,4097713,4337183,4093798,4242368,4300206,373432,4243442,4242809,4240030,4154632,4240031,4242810,4242490,4240032,4242811,4242812,4094564,4242813,4116216,4303106,433987,4093657,435205,4097865,199764,4243443,4243444,4243445,440063,4243563,4240034,444463,4240035,4243564,4243565,4242492,134304,4240036,4242493,4240037,4242494,4240038,4242495,4242814,4243566,4240039,4242496,4242497,75206,4240040,4242498,201823,4243568,4242499,4242815,4094562,4260193,4002344,4003178,4003177,4003827,4003826,4002350,4002349,4003174,4003176,4002351,4001322,4002346,4243569,198991,4240041,4243570,4093658,30356,28115,4097726,4242816,437251,4242817,77819,4047217,4240042,4242818,4240043,4243573,4097110,4242819,4242501,4240148,4242502,4242341,4242503,4240149,4242820,4243574,4240150,4240151,4243575,4240152,4242821,4242822,444457,434303,200671,4114353,433979,4240153,372272,4243576,4242505,4242974,4243577,4242823,434301,4240155,4242824,4242825,4242826,4242827,4243579,4001662,4242828,4097259,4240156,77517,4242507,74322,4242508,4240157,433981,438116,4242509,444459,3181557,138102,4242510,4240158,4243580,4096359,4240159,4242511,4242512,4242830,4242513,4242831,4242832,4242514,4242515,4096360,4242956,4242957,140966,4240160,4242516,4243582,4242517,4240161,4243583,4182185,198993,4243584,141248,4096365,444445,4240163,4243585,4242958,4240164,4242518,4093945,4242519,4096362,4243586,4240165,4242959,136057,4242960,4096364,4243587,4242961,434885,4242962,4243588,442105,201256,4240166,4243589,444456,444455,444454,4243590,35616611,35616486,444453,444452,194607,4240168,35616596,35616604,444451,444450,200060,444449,4243593,4242522,4242521,4097114,138117,4325198,4180119,135767,4113124,4240174,4243594,196061,4242965,4242524,4242966,4242967,4240175,4242968,4093788,4242653,4240176,4242654,4242969,4242970,4242656,4241654,4243595,4241655,4242971,436366,4242972,4243596,4242657,4242975,4097254,4241028,4113104,438107,4242658,4097722,141249,4243597,4242976,440668,4241657,439763,4241658,444444,4243598,4097262,4242978,4241659,4097261,4242979,4242980,4242660,4243599,4242981,4243720,4242661,4093787,4241660,4242982,4242662,4242983,198103,4242663,196377,4241661,78706,4242664,196364,195500,4243723,4243724,201244,4241662,4243725,4243726,4243727,4242665,4242984,4243728,77815,4242985,4243730,4242986,4242987,438390,4097257,4243731,4097274,4097857,4094714,435506,438990,761004,765198,761003,760997,765037,761005,761002,760998,4208806,4311572,4085712,4144015,4114352,4114186,4112099,4212795,4098959,4114355,4213516,3170462,4112861,4112756,4111934,4002901,4112599,4112972,4110560,4115129,72576,4116093,4099344,4093944,4116356,193431,4113121,193722,4156048,4175198,4333986,4115127,4093654,4097710,4114223,4113130,4112103,4110557,4115141,4111795,4098900,4097107,434605,4111796,4115146,4116353,4112583,4114351,4115136,4112741,4112851,4116352,4112594,432860,4116214,4112602,4081055,4110563,4114083,4151256,4113120,4099352,4096372,4079830,4110716,4116355,4151176,4113129,4116217,4111794,4111651,4170465,4115140,4112588,4116232,4111779,4097106,4111781,36403105,36403125,36403088,36539186,36531242,36534554,36519234,36527653,36537528,36530551,36527589,36534551,36537662,36533469,35622955,36522639,36537853,36532749,36526549,36523636,439083,4297799,751726,36533096,4186928,36520274,36540170,36539412,36533366,36523344,36522872,36517753,36540434,36531006,36527710,36520989,36533672,36522958,36532440,36539612,36529143,36523443,36523457,751707,36539425,36528019,36522028,36522933,36521827,36519362,36532754,36521463,36528735,761036,36523193,36519636,36537843,36521676,36528114,36526504,36525737,36527843,36525283,36524640,36535721,36521207,36530445,36530556,36523941,36519858,36539519,36524849,36403177)
  and c.invalid_reason is null

) E ON I.concept_id = E.concept_id
WHERE E.concept_id is null
) C;

UPDATE STATISTICS #Codesets;


SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, visit_occurrence_id
INTO #qualified_events
FROM 
(
  select pe.event_id, pe.person_id, pe.start_date, pe.end_date, pe.op_start_date, pe.op_end_date, row_number() over (partition by pe.person_id order by pe.start_date ASC) as ordinal, cast(pe.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM (-- Begin Primary Events
select P.ordinal as event_id, P.person_id, P.start_date, P.end_date, op_start_date, op_end_date, cast(P.visit_occurrence_id as bigint) as visit_occurrence_id
FROM
(
  select E.person_id, E.start_date, E.end_date,
         row_number() OVER (PARTITION BY E.person_id ORDER BY E.sort_date ASC, E.event_id) ordinal,
         OP.observation_period_start_date as op_start_date, OP.observation_period_end_date as op_end_date, cast(E.visit_occurrence_id as bigint) as visit_occurrence_id
  FROM 
  (
  -- Begin Condition Occurrence Criteria
SELECT C.person_id, C.condition_occurrence_id as event_id, C.start_date, C.end_date,
  C.visit_occurrence_id, C.start_date as sort_date
FROM 
(
  SELECT co.person_id,co.condition_occurrence_id,co.condition_concept_id,co.visit_occurrence_id,co.condition_start_date as start_date, COALESCE(co.condition_end_date, DATEADD(day,1,co.condition_start_date)) as end_date 
  FROM @cdm_database_schema.CONDITION_OCCURRENCE co
  JOIN #Codesets cs on (co.condition_concept_id = cs.concept_id and cs.codeset_id = 0)
) C


-- End Condition Occurrence Criteria

UNION ALL
-- Begin Measurement Criteria
select C.person_id, C.measurement_id as event_id, C.start_date, C.end_date,
       C.visit_occurrence_id, C.start_date as sort_date
from 
(
  select m.person_id,m.measurement_id,m.measurement_concept_id,m.visit_occurrence_id,m.value_as_number,m.range_high,m.range_low,m.measurement_date as start_date, DATEADD(day,1,m.measurement_date) as end_date 
  FROM @cdm_database_schema.MEASUREMENT m
JOIN #Codesets cs on (m.measurement_concept_id = cs.concept_id and cs.codeset_id = 0)
) C


-- End Measurement Criteria

UNION ALL
-- Begin Measurement Criteria
select C.person_id, C.measurement_id as event_id, C.start_date, C.end_date,
       C.visit_occurrence_id, C.start_date as sort_date
from 
(
  select m.person_id,m.measurement_id,m.measurement_concept_id,m.visit_occurrence_id,m.value_as_number,m.range_high,m.range_low,m.measurement_date as start_date, DATEADD(day,1,m.measurement_date) as end_date 
  FROM @cdm_database_schema.MEASUREMENT m
JOIN #Codesets cns on (m.measurement_source_concept_id = cns.concept_id and cns.codeset_id = 0)
) C


-- End Measurement Criteria

UNION ALL
-- Begin Observation Criteria
select C.person_id, C.observation_id as event_id, C.start_date, C.END_DATE,
       C.visit_occurrence_id, C.start_date as sort_date
from 
(
  select o.person_id,o.observation_id,o.observation_concept_id,o.visit_occurrence_id,o.value_as_number,o.observation_date as start_date, DATEADD(day,1,o.observation_date) as end_date 
  FROM @cdm_database_schema.OBSERVATION o
JOIN #Codesets cs on (o.observation_concept_id = cs.concept_id and cs.codeset_id = 0)
) C


-- End Observation Criteria

  ) E
	JOIN @cdm_database_schema.observation_period OP on E.person_id = OP.person_id and E.start_date >=  OP.observation_period_start_date and E.start_date <= op.observation_period_end_date
  WHERE DATEADD(day,0,OP.OBSERVATION_PERIOD_START_DATE) <= E.START_DATE AND DATEADD(day,0,E.START_DATE) <= OP.OBSERVATION_PERIOD_END_DATE
) P
WHERE P.ordinal = 1
-- End Primary Events
) pe
  
) QE

;

--- Inclusion Rule Inserts

create table #inclusion_events (inclusion_rule_id bigint,
	person_id bigint,
	event_id bigint
);

select event_id, person_id, start_date, end_date, op_start_date, op_end_date
into #included_events
FROM (
  SELECT event_id, person_id, start_date, end_date, op_start_date, op_end_date, row_number() over (partition by person_id order by start_date ASC) as ordinal
  from
  (
    select Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date, SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) as inclusion_rule_mask
    from #qualified_events Q
    LEFT JOIN #inclusion_events I on I.person_id = Q.person_id and I.event_id = Q.event_id
    GROUP BY Q.event_id, Q.person_id, Q.start_date, Q.end_date, Q.op_start_date, Q.op_end_date
  ) MG -- matching groups
{0 != 0}?{
  -- the matching group with all bits set ( POWER(2,# of inclusion rules) - 1 = inclusion_rule_mask
  WHERE (MG.inclusion_rule_mask = POWER(cast(2 as bigint),0)-1)
}
) Results
WHERE Results.ordinal = 1
;



-- generate cohort periods into #final_cohort
select person_id, start_date, end_date
INTO #cohort_rows
from ( -- first_ends
	select F.person_id, F.start_date, F.end_date
	FROM (
	  select I.event_id, I.person_id, I.start_date, CE.end_date, row_number() over (partition by I.person_id, I.event_id order by CE.end_date) as ordinal
	  from #included_events I
	  join ( -- cohort_ends
-- cohort exit dates
-- By default, cohort exit at the event's op end date
select event_id, person_id, op_end_date as end_date from #included_events
    ) CE on I.event_id = CE.event_id and I.person_id = CE.person_id and CE.end_date >= I.start_date
	) F
	WHERE F.ordinal = 1
) FE;

select person_id, min(start_date) as start_date, end_date
into #final_cohort
from ( --cteEnds
	SELECT
		 c.person_id
		, c.start_date
		, MIN(ed.end_date) AS end_date
	FROM #cohort_rows c
	JOIN ( -- cteEndDates
    SELECT
      person_id
      , DATEADD(day,-1 * 0, event_date)  as end_date
    FROM
    (
      SELECT
        person_id
        , event_date
        , event_type
        , SUM(event_type) OVER (PARTITION BY person_id ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS interval_status
      FROM
      (
        SELECT
          person_id
          , start_date AS event_date
          , -1 AS event_type
        FROM #cohort_rows

        UNION ALL


        SELECT
          person_id
          , DATEADD(day,0,end_date) as end_date
          , 1 AS event_type
        FROM #cohort_rows
      ) RAWDATA
    ) e
    WHERE interval_status = 0
  ) ed ON c.person_id = ed.person_id AND ed.end_date >= c.start_date
	GROUP BY c.person_id, c.start_date
) e
group by person_id, end_date
;

DELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;
INSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)
select @target_cohort_id as cohort_definition_id, person_id, start_date, end_date 
FROM #final_cohort CO
;

{1 != 0}?{
-- BEGIN: Censored Stats

delete from @results_database_schema.cohort_censor_stats where cohort_definition_id = @target_cohort_id;

-- END: Censored Stats
}
{1 != 0 & 0 != 0}?{

CREATE TABLE #inclusion_rules (rule_sequence int);

-- Find the event that is the 'best match' per person.  
-- the 'best match' is defined as the event that satisfies the most inclusion rules.
-- ties are solved by choosing the event that matches the earliest inclusion rule, and then earliest.

select q.person_id, q.event_id
into #best_events
from #qualified_events Q
join (
	SELECT R.person_id, R.event_id, ROW_NUMBER() OVER (PARTITION BY R.person_id ORDER BY R.rule_count DESC,R.min_rule_id ASC, R.start_date ASC) AS rank_value
	FROM (
		SELECT Q.person_id, Q.event_id, COALESCE(COUNT(DISTINCT I.inclusion_rule_id), 0) AS rule_count, COALESCE(MIN(I.inclusion_rule_id), 0) AS min_rule_id, Q.start_date
		FROM #qualified_events Q
		LEFT JOIN #inclusion_events I ON q.person_id = i.person_id AND q.event_id = i.event_id
		GROUP BY Q.person_id, Q.event_id, Q.start_date
	) R
) ranked on Q.person_id = ranked.person_id and Q.event_id = ranked.event_id
WHERE ranked.rank_value = 1
;

-- modes of generation: (the same tables store the results for the different modes, identified by the mode_id column)
-- 0: all events
-- 1: best event


-- BEGIN: Inclusion Impact Analysis - event
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 0 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #qualified_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 0 as mode_id
from #inclusion_rules ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #qualified_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #qualified_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 0 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 0;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 0 as mode_id
FROM
(select count_big(event_id) as total from #qualified_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal
  where sr.mode_id = 0 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - event

-- BEGIN: Inclusion Impact Analysis - person
-- calculte matching group counts
delete from @results_database_schema.cohort_inclusion_result where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_result (cohort_definition_id, inclusion_rule_mask, person_count, mode_id)
select @target_cohort_id as cohort_definition_id, inclusion_rule_mask, count_big(*) as person_count, 1 as mode_id
from
(
  select Q.person_id, Q.event_id, CAST(SUM(coalesce(POWER(cast(2 as bigint), I.inclusion_rule_id), 0)) AS bigint) as inclusion_rule_mask
  from #best_events Q
  LEFT JOIN #inclusion_events I on q.person_id = i.person_id and q.event_id = i.event_id
  GROUP BY Q.person_id, Q.event_id
) MG -- matching groups
group by inclusion_rule_mask
;

-- calculate gain counts 
delete from @results_database_schema.cohort_inclusion_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_inclusion_stats (cohort_definition_id, rule_sequence, person_count, gain_count, person_total, mode_id)
select @target_cohort_id as cohort_definition_id, ir.rule_sequence, coalesce(T.person_count, 0) as person_count, coalesce(SR.person_count, 0) gain_count, EventTotal.total, 1 as mode_id
from #inclusion_rules ir
left join
(
  select i.inclusion_rule_id, count_big(i.event_id) as person_count
  from #best_events Q
  JOIN #inclusion_events i on Q.person_id = I.person_id and Q.event_id = i.event_id
  group by i.inclusion_rule_id
) T on ir.rule_sequence = T.inclusion_rule_id
CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal
CROSS JOIN (select count_big(event_id) as total from #best_events) EventTotal
LEFT JOIN @results_database_schema.cohort_inclusion_result SR on SR.mode_id = 1 AND SR.cohort_definition_id = @target_cohort_id AND (POWER(cast(2 as bigint),RuleTotal.total_rules) - POWER(cast(2 as bigint),ir.rule_sequence) - 1) = SR.inclusion_rule_mask -- POWER(2,rule count) - POWER(2,rule sequence) - 1 is the mask for 'all except this rule'
;

-- calculate totals
delete from @results_database_schema.cohort_summary_stats where cohort_definition_id = @target_cohort_id and mode_id = 1;
insert into @results_database_schema.cohort_summary_stats (cohort_definition_id, base_count, final_count, mode_id)
select @target_cohort_id as cohort_definition_id, PC.total as person_count, coalesce(FC.total, 0) as final_count, 1 as mode_id
FROM
(select count_big(event_id) as total from #best_events) PC,
(select sum(sr.person_count) as total
  from @results_database_schema.cohort_inclusion_result sr
  CROSS JOIN (select count(*) as total_rules from #inclusion_rules) RuleTotal
  where sr.mode_id = 1 and sr.cohort_definition_id = @target_cohort_id and sr.inclusion_rule_mask = POWER(cast(2 as bigint),RuleTotal.total_rules)-1
) FC
;

-- END: Inclusion Impact Analysis - person

TRUNCATE TABLE #best_events;
DROP TABLE #best_events;

TRUNCATE TABLE #inclusion_rules;
DROP TABLE #inclusion_rules;
}



TRUNCATE TABLE #cohort_rows;
DROP TABLE #cohort_rows;

TRUNCATE TABLE #final_cohort;
DROP TABLE #final_cohort;

TRUNCATE TABLE #inclusion_events;
DROP TABLE #inclusion_events;

TRUNCATE TABLE #qualified_events;
DROP TABLE #qualified_events;

TRUNCATE TABLE #included_events;
DROP TABLE #included_events;

TRUNCATE TABLE #Codesets;
DROP TABLE #Codesets;
